package broadcast
func (bh *Handler) ProcessMessage(msg *cb.Envelope, addr string) (resp *ab.BroadcastResponse)
里面会调用
err = processor.Order(msg, configSeq)

如果排序机构是solo，这个调用会执行
package solo
func (ch *chain) Order(env *cb.Envelope, configSeq uint64) error
这个函数是这样写的
// Order accepts normal messages for ordering
func (ch *chain) Order(env *cb.Envelope, configSeq uint64) error {
	select {
	case ch.sendChan <- &message{
		configSeq: configSeq,
		normalMsg: env,
	}:
		return nil
	case <-ch.exitChan:
		return fmt.Errorf("Exiting")
	}
}

这个写法很奇怪，case ch.sendChan
这一句会无条件执行，也就是说，每次调用都会走到
return nil
哪下面的分支case <-ch.exitChan:
有啥用？永远调用不到！！！